NEW POTD
class Solution {
public:
double ans;

void DFS(int start,int end,vector<pair<int,double>>adj[],double prob,vector<double>&dp){
   if(start==end){
    ans=max(ans,prob);
   }
   

}
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start_node, int end_node) {
        vector<pair<int,double>>adj[n];
        for(int i=0;i<edges.size();i++){
            adj[edges[i][0]].push_back({edges[i][1],succProb[i]});
            adj[edges[i][1]].push_back({edges[i][0],succProb[i]});
        }
        vector<double>dp(n,0);
        priority_queue<pair<double,int>>q;
        double p=1;
        q.push({p,start_node});
        while(!q.empty()){
            auto x=q.top();
            q.pop();
            if(x.second==end_node){
                ans=max(ans,x.first);
                continue;
            }
            for(auto it:adj[x.second]){
                if(dp[it.first]<it.second*x.first){
                    double s=it.second*x.first;
                    dp[it.first]=s;
                    q.push({s,it.first});
                }
            }
        }
        return ans;
    }
};
